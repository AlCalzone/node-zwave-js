# This is a composition of lint and test scripts
# Make sure to update this file along with the others

name: Test and Release

# Run this job on all pushes and pull requests
# as well as tags with a semantic version
on:
    push:
        branches:
            - "*"
        tags:
          # normal versions
          - "v[0-9]+.[0-9]+.[0-9]+"
          # pre-releases
          - "v[0-9]+.[0-9]+.[0-9]+-**"
    pull_request: {}

jobs:
  # Performs quick checks before the expensive test runs
  check-and-lint:
    if: contains(github.event.head_commit.message, '[skip ci]') == false

    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}

    - name: Install dependencies
      run: npm ci

    - name: Perform a type check
      run: npx lerna run check
      env:
        CI: true

    - name: Lint TypeScript code
      run: npx lerna run lint
    - name: Lint config files
      run: npx lerna run lint:config

  # ===================

  # Tests if the library compiles
  build:
    if: contains(github.event.head_commit.message, '[skip ci]') == false

    needs: [check-and-lint]

    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}

    - name: Install dependencies
      run: npm ci

    - name: Compile TypeScript code
      run: npx lerna run build
    
    - name: Import main entry point
      run: node -e 'require("./packages/zwave-js")'

  # ===================

  # Runs unit tests on all supported node versions and OSes
  unit-tests:
    if: contains(github.event.head_commit.message, '[skip ci]') == false

    needs: [check-and-lint, build]

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        node-version: [10.x, 12.x, 14.x]
        os: [ubuntu-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}

    - name: Install dependencies
      run: npm ci

    - name: Run component tests
      run: npm run test:ci
      env:
        CI: true

  # ===================

  # Generate coverage reports when the unit tests have succeeded
  coverage:
    # Trigger this step only on pushes, because the job often fails for pull requests
    if: |
      contains(github.event.head_commit.message, '[skip ci]') == false &&
      github.event_name == 'push'

    needs: [unit-tests]

    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}

    - name: Install dependencies
      run: npm ci

    - name: Generate coverage
      run: npm run coverage:ci
      env:
        CI: true
    - name: Upload to Coveralls
      uses: coverallsapp/github-action@master
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}

  # ===================

  # Deploys the final package to NPM
  deploy:
    # Trigger this step only when a commit on master is tagged with a version number
    if: |
      contains(github.event.head_commit.message, '[skip ci]') == false &&
      github.event_name == 'push' &&
      github.event.base_ref == 'refs/heads/master' &&
      startsWith(github.ref, 'refs/tags/v')

    needs: [unit-tests]

    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}

    - name: Extract the version and commit body from the tag
      # The body may be multiline, therefore we need to escape some characters
      run: |
        VERSION="${{ github.ref }}"
        VERSION=${VERSION##*/v}
        echo "::set-env name=VERSION::$VERSION"
        BODY=$(git show -s --format=%b)
        BODY="${BODY//'%'/'%25'}"
        BODY="${BODY//$'\n'/'%0A'}"
        BODY="${BODY//$'\r'/'%0D'}"
        echo "::set-env name=BODY::$BODY"

    - name: Install dependencies
      run: npm ci

    - name: Create a clean build
      run: npx lerna gulp build

    - name: Publish package to npm
      run: |
        npm config set //registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}
        npm whoami
        npm publish

    - name: Create Github Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release v${{ env.VERSION }}
        draft: false
        # Prerelease versions create prereleases on Github
        prerelease: ${{ contains(env.VERSION, '-') }}
        body: ${{ env.BODY }}

    - name: Notify Sentry.io about the release
      run: |
        npm i -g @sentry/cli
        export SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}
        export SENTRY_ORG=alcalzone
        export SENTRY_PROJECT=iobroker_zwave
        export SENTRY_VERSION=zwave-js@${{ env.VERSION }}
        sentry-cli releases new $SENTRY_VERSION
        sentry-cli releases set-commits $SENTRY_VERSION --auto
        sentry-cli releases files $SENTRY_VERSION upload-sourcemaps build/
        sentry-cli releases finalize $SENTRY_VERSION
