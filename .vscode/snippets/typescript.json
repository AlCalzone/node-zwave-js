{
	"Z-Wave message classes": {
		"prefix": "zwmsg",
		"body": [
			"import { IDriver } from \"../driver/IDriver\";",
			"import { ZWaveError, ZWaveErrorCodes } from \"../error/ZWaveError\";",
			"import {",
			"\tFunctionType,",
			"\tMessagePriority,",
			"\tMessageType,",
			"} from \"../message/Constants\";",
			"import {",
			"\texpectedResponse,",
			"\tgotDeserializationOptions,",
			"\tMessage,",
			"\tMessageBaseOptions,",
			"\tMessageDeserializationOptions,",
			"\tmessageTypes,",
			"\tpriority,",
			"} from \"../message/Message\";",
			"",
			"export interface ${1}${2}Options extends MessageBaseOptions {",
			"\t${0:someProperty: number;}",
			"}",
			"",
			"@messageTypes(MessageType.${2}, FunctionType.${1})",
			"@expectedResponse(FunctionType.${1})",
			"@priority(MessagePriority.${3:Normal})",
			"export class ${1:Dummy}${2:Request} extends Message {",
			"\tpublic constructor(",
			"\t\tdriver: IDriver,",
			"\t\toptions: MessageDeserializationOptions | ${1}${2}Options,",
			"\t) {",
			"\t\tsuper(driver, options);",
			"\t\tif (gotDeserializationOptions(options)) {",
			"\t\t\tthrow new ZWaveError(",
			"\t\t\t\t`${this.constructor.name}: deserialization not implemented`,",
			"\t\t\t\tZWaveErrorCodes.Deserialization_NotImplemented,",
			"\t\t\t);",
			"\t\t} else {",
			"\t\t\t// TODO: Populate properties from options object",
			"\t\t\tthrow new Error(\"not implemented\");",
			"\t\t}",
			"\t}",
			"",
			"\tpublic serialize(): Buffer {",
			"\t\tthis.payload = Buffer.from([",
			"\t\t\t/* TODO: serialize */",
			"\t\t]);",
			"",
			"\t\treturn super.serialize();",
			"\t}",
			"}",
			""
		]
	},
	"Z-Wave message class test": {
		"prefix": "zwmsgtest",
		"body": [
			"describe(\"lib/${1:driver}/${2:Test}${3:Request} => \", () => {",
			"\tconst req = new ${2}${3}(undefined);",
			"",
			"\tit(\"should be a Message\", () => {",
			"\t\texpect(req).toBeInstanceOf(Message);",
			"\t});",
			"\tit(\"with type ${3}\", () => {",
			"\t\texpect(getMessageType(req)).toBe(MessageType.${3});",
			"\t\texpect(getMessageTypeStatic(${2}${3})).toBe(MessageType.${3});",
			"\t});",
			"\tit(\"and priority ${4:Normal}\", () => {",
			"\t\texpect(getDefaultPriority(req)).toBe(MessagePriority.${4});",
			"\t\texpect(getDefaultPriorityStatic(${2}${3})).toBe(MessagePriority.${4});",
			"\t});",
			"\tit(\"and a function type ${2}\", () => {",
			"\t\texpect(getFunctionType(req)).toBe(FunctionType.${2});",
			"\t\texpect(getFunctionTypeStatic(${2}${3})).toBe(FunctionType.${2});",
			"\t});",
			"\tit(\"that expects a ${2} response\", () => {",
			"\t\texpect(getExpectedResponse(req)).toBe(FunctionType.${2});",
			"\t\texpect(getExpectedResponseStatic(${2}${3})).toBe(FunctionType.${2});",
			"\t});",
			"",
			"});"
		]
	},
	"Z-Wave toJSON override": {
		"prefix": "zwjson",
		"body": [
			"public toJSON(): JSONObject {",
			"\treturn super.toJSONInherited({",
			"\t\t${0}",
			"\t});",
			"}"
		]
	},
	"Z-Wave Command Class implementation": {
		"prefix": "zwcc",
		"body": [
			"import {",
			"\tCCCommand,",
			"\tCCCommandOptions,",
			"\tCommandClass,",
			"\tcommandClass,",
			"\texpectedCCResponse,",
			"\timplementedVersion,",
			"\tCommandClassDeserializationOptions,",
			"\tgotDeserializationOptions,",
			"} from \"./CommandClass\";",
			"import { CommandClasses } from \"./CommandClasses\";",
			"import { IDriver } from \"../driver/IDriver\";",
			"",
			"// All the supported commands",
			"export enum ${1:Basic}Command {",
			"\t${3:// Get = 0x01}",
			"}",
			"",
			"@commandClass(CommandClasses.${1})",
			"@implementedVersion(${2:1})",
			"@expectedCCResponse(CommandClasses.${1})",
			"export class ${1}CC extends CommandClass {",
			"\tpublic ccCommand!: ${1}Command;",
			"}",
			"",
			"${0}"
		],
		"description": "Z-Wave Command Class implementation"
	},
	"Z-Wave CC Command": {
		"prefix": "zwcccmd",
		"body": [
			"interface ${1:Basic}CC${2:Get}Options extends CCCommandOptions {",
			"\tsomeProperty: number;",
			"}",
			"",
			"@CCCommand(${1}Command.${2})",
			"export class ${1}CC${2} extends ${1}CC {",
			"\tpublic constructor(",
			"\t\tdriver: IDriver,",
			"\t\toptions: CommandClassDeserializationOptions | ${1}CC${2}Options,",
			"\t) {",
			"\t\tsuper(driver, options);",
			"\t\tif (gotDeserializationOptions(options)) {",
			"\t\t\t// TODO: Deserialize payload",
			"\t\t\tthrow new Error(\"not implemented\");",
			"\t\t} else {",
			"\t\t\t// TODO: Populate properties from options object",
			"\t\t\tthrow new Error(\"not implemented\");",
			"\t\t}",
			"\t}",
			"",
			"\tpublic serialize(): Buffer {",
			"\t\tthis.payload = Buffer.from([",
			"\t\t\t/* TODO: serialize */",
			"\t\t]);",
			"\t\treturn super.serialize();",
			"\t}",
			"}",
			"${0}"
		],
		"description": "Specific implementation of a single CC command"
	},
	"Z-Wave CC Command (Report)": {
		"prefix": "zwccreport",
		"body": [
			"@CCCommand(${1:Basic}Command.${2}Report)",
			"export class ${1}CC${2}Report extends ${1}CC {",
			"\tpublic constructor(",
			"\t\tdriver: IDriver,",
			"\t\toptions: CommandClassDeserializationOptions,",
			"\t) {",
			"\t\tsuper(driver, options);",
			"\t\t${0:// TODO: Deserialize}",
			"\t}",
			"}"
		],
		"description": "Specific implementation of a single CC report"
	},
	"ZWave CC Command (empty)": {
		"prefix": "zwccemptycmd",
		"body": [
			"@CCCommand(${1:Basic}Command.${2:Get})",
			"export class ${1}CC${2} extends ${1}CC {",
			"\tpublic constructor(",
			"\t\tdriver: IDriver,",
			"\t\toptions: CommandClassDeserializationOptions | CCCommandOptions,",
			"\t) {",
			"\t\tsuper(driver, options);",
			"\t}",
			"}"
		],
		"description": "Specific implementation of CC command that is sent and expects no parameters"
	},
	"Readonly property": {
		"prefix": "propread",
		"body": [
			"private _${1:value}: ${2:string};",
			"public get ${1}(): ${2} {",
			"\treturn this._${1};",
			"}${0}"
		]
	},
	"Z-Wave CC property": {
		"prefix": "zwccprop",
		"body": ["@ccValue() public ${1:property}: ${2:number};${0}"]
	},
	"Jest test file": {
		"prefix": "jest",
		"body": [
			"/// <reference types=\"jest-extended\" />",
			"import { ${3:methodToTest} } from \"./${2}\";",
			"",
			"describe(\"${1:path}/${2:moduleToTest}\", () => {",
			"\tdescribe(\"${3}()\", () => {",
			"\t\tit(\"${4:does something}\", () => {",
			"\t\t\t${0:// implementation}",
			"\t\t});",
			"\t});",
			"});"
		]
	}
}
